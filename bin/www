#!/usr/bin/env node

// Configure the db
import dbConfig from '../config/data-base';
import mongoose from 'mongoose';
import logger from '../config/logger';
import { json } from 'express';
import dotenv from 'dotenv'
import { MongoClient } from 'mongodb';


const startApp = async() => {
  try{
    await mongoose.connect(dbConfig.url, {useUnifiedTopology: true, useNewUrlParser: true})
    server.listen(port, () => {
      logger.info( `server up and running on PORT : ${port}`)
    })
  } catch(e) {
    logger.error(json(e))
  }
}
startApp()

dotenv.config()
// console.log(process.env.PORT)
//const url = process.env.PORT;
// 
//const connection = new Connection(process.env.DB_CONNECTION_STRING);
/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('lab-nodejs:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */


server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
